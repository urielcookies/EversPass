---
// src/components/Navbar.astro
import { SITE_URL } from '@/lib/constants';
import { UserButton } from '@clerk/astro/components';
import NavbarInteractive from './NavbarInteractive';

const { currentPage = "/", isAppSubdomain = false } = Astro.props;

// CSS classes
const linkClasses = "px-3 py-2 rounded-md text-sm font-medium transition-colors duration-300";
const activeLinkClasses = "bg-slate-200 dark:bg-slate-700 text-sky-600 dark:text-sky-400";
const inactiveLinkClasses = "text-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 hover:text-slate-900 dark:hover:text-slate-100";

const getLinkClassName = (page: string) => {
  return `${linkClasses} ${currentPage === page ? activeLinkClasses : inactiveLinkClasses}`;
};
---

<nav class="bg-white/80 dark:bg-slate-900/80 backdrop-blur-md sticky top-0 z-50 border-b border-slate-200/50 dark:border-slate-800/50">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex items-center justify-between h-16 relative">

      <!-- LEFT GROUP -->
      <div class="flex items-center flex-shrink-0">
        {!isAppSubdomain && (
          <>
            <!-- Theme Toggle for Mobile/Tablet -->
            <NavbarInteractive client:only="react" type="theme-toggle" isMobile={true} />
            
            <!-- Desktop Navigation Links -->
            <div class="hidden lg:flex items-center space-x-4">
              <a href="/" class={getLinkClassName("/")}>Home</a>
              <a href="/sessions" class={getLinkClassName("/sessions")}>Sessions</a>
              <a href="/pricing" class={getLinkClassName("/pricing")}>Pricing</a>
            </div>
          </>
        )}
        
        {isAppSubdomain && (
          // <!-- Theme Toggle for App Subdomain -->
          <button id="theme-toggle" class="p-2 rounded-full text-slate-500 dark:text-slate-400 hover:bg-slate-200 dark:hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-slate-50 dark:focus:ring-offset-slate-900 focus:ring-sky-500">
            <span class="sr-only">Toggle theme</span>
            <svg id="theme-toggle-light-icon" class="h-6 w-6 hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
            </svg>
            <svg id="theme-toggle-dark-icon" class="h-6 w-6 hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
            </svg>
          </button>
        )}
      </div>

      <!-- CENTER GROUP: EversPass Logo/Title -->
      <div class="flex lg:hidden flex-grow justify-center lg:absolute lg:left-1/2 lg:transform lg:-translate-x-1/2 lg:pointer-events-none">
        {isAppSubdomain ? (
          <a 
            href={SITE_URL}
            class="text-2xl font-bold text-slate-800 dark:text-white hover:text-sky-600 dark:hover:text-sky-400 transition-colors duration-200 lg:pointer-events-auto">
            EversPass
          </a>
        ) : (
          <span class="text-2xl font-bold text-slate-800 dark:text-white lg:pointer-events-auto">EversPass</span>
        )}
      </div>

      <!-- Desktop centered logo (hidden on mobile) -->
      <div class="hidden lg:flex absolute left-1/2 transform -translate-x-1/2 pointer-events-none">
        {isAppSubdomain ? (
          <a 
            href={SITE_URL}
            class="text-2xl font-bold text-slate-800 dark:text-white pointer-events-auto hover:text-sky-600 dark:hover:text-sky-400 transition-colors duration-200">
            EversPass
          </a>
        ) : (
          <span class="text-2xl font-bold text-slate-800 dark:text-white pointer-events-auto">EversPass</span>
        )}
      </div>

      <!-- RIGHT GROUP -->
      <div class="flex items-center flex-shrink-0">
        {isAppSubdomain ? (
          // <!-- User Button for App Subdomain -->
          <UserButton afterSignOutUrl={SITE_URL}/>
        ) : (
          <>
            {/* <!-- Auth buttons for desktop --> */}
            <div class="hidden lg:flex items-center space-x-3">
              <NavbarInteractive client:only="react" type="auth-buttons" />
            </div>

            {/* <!-- Theme Toggle for Desktop --> */}
            <NavbarInteractive client:only="react" type="theme-toggle" isMobile={false} />
            
            <!-- Mobile Menu Toggle -->
            <div class="flex lg:hidden ml-4">
              <NavbarInteractive client:only="react" type="mobile-menu-toggle" />
            </div>
          </>
        )}
      </div>
    </div>
  </div>

  <!-- MOBILE MENU DROPDOWN (only for non-app subdomain) -->
  {!isAppSubdomain && (
    <NavbarInteractive 
      client:only="react" 
      type="mobile-menu" 
      currentPage={currentPage}
      linkClasses={linkClasses}
      activeLinkClasses={activeLinkClasses}
      inactiveLinkClasses={inactiveLinkClasses}
    />
  )}
</nav>

{isAppSubdomain && (
  <script>
    function initializeAppNavbar() {
      const themeToggleButton = document.getElementById('theme-toggle');
      const lightIcon = document.getElementById('theme-toggle-light-icon');
      const darkIcon = document.getElementById('theme-toggle-dark-icon');
      
      if (!themeToggleButton || !lightIcon || !darkIcon) {
        return;
      }

      const syncThemeIcon = () => {
        const isDark = document.documentElement.classList.contains('dark');
        if (isDark) {
          lightIcon.classList.remove('hidden');
          darkIcon.classList.add('hidden');
        } else {
          lightIcon.classList.add('hidden');
          darkIcon.classList.remove('hidden');
        }
      };

      const toggleTheme = () => {
        const isDark = document.documentElement.classList.toggle('dark');
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
        syncThemeIcon();
        window.dispatchEvent(new Event('themeChange'));
      };

      themeToggleButton.addEventListener('click', toggleTheme);
      syncThemeIcon();
    }

    document.addEventListener('astro:page-load', initializeAppNavbar);
  </script>
)}