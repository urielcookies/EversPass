---
interface Props {
  isOpen: boolean; // Still accept isOpen
}

const { isOpen } = Astro.props;
---

<div id="signup-modal" class={`fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm transition-opacity duration-300 ${isOpen ? 'opacity-100 pointer-events-auto' : 'opacity-0 pointer-events-none'}`}>
  <div class={`bg-white dark:bg-slate-800 rounded-lg shadow-xl w-full max-w-md mx-4 transition-transform duration-300 ${isOpen ? 'scale-100' : 'scale-95'}`} id="signup-modal-content">
    <div class="flex items-center justify-between p-6 border-b border-slate-200 dark:border-slate-700">
      <h2 class="text-xl font-semibold text-slate-900 dark:text-white">Create Your Account</h2>
      <button class="text-slate-400 hover:text-slate-600 dark:hover:text-slate-300" data-close-modal>
        <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    <form class="p-6 space-y-4" data-signup-form>
      <div>
        <label for="signup-name" class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">Full Name</label>
        <input type="text" id="signup-name" class="w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500 dark:bg-slate-700 dark:text-white" placeholder="Enter your full name" required>
      </div>
      <div>
        <label for="signup-email" class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">Email</label>
        <input type="email" id="signup-email" class="w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500 dark:bg-slate-700 dark:text-white" placeholder="Enter your email" required>
      </div>
      <div>
        <label for="signup-password" class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">Password</label>
        <input type="password" id="signup-password" class="w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500 dark:bg-slate-700 dark:text-white" placeholder="Create a password" required>
      </div>
      <div>
        <label for="signup-confirm-password" class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">Confirm Password</label>
        <input type="password" id="signup-confirm-password" class="w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500 dark:bg-slate-700 dark:text-white" placeholder="Confirm your password" required>
      </div>
      <div class="flex items-center">
        <input type="checkbox" id="terms-checkbox" class="rounded border-slate-300 dark:border-slate-600 text-sky-600 focus:ring-sky-500" required>
        <label for="terms-checkbox" class="ml-2 text-sm text-slate-600 dark:text-slate-400">
          I agree to the <a href="#" class="text-sky-600 dark:text-sky-400 hover:underline">Terms of Service</a> and <a href="#" class="text-sky-600 dark:text-sky-400 hover:underline">Privacy Policy</a>
        </label>
      </div>
      <button type="submit" class="w-full bg-sky-600 text-white py-2 px-4 rounded-md hover:bg-sky-700 dark:bg-sky-500 dark:hover:bg-sky-600 transition-colors duration-300">
        Create Account
      </button>
    </form>
    <div class="px-6 pb-6 text-center">
      <p class="text-sm text-slate-600 dark:text-slate-400">
        Already have an account? 
        <button data-switch-to-login class="text-sky-600 dark:text-sky-400 hover:underline">Sign in</button>
      </p>
    </div>
  </div>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    const signupModal = document.getElementById('signup-modal');
    if (!signupModal) return;

    const modalContent = signupModal.querySelector('#signup-modal-content');
    const closeButton = signupModal.querySelector('[data-close-modal]');
    const switchToLoginButton = signupModal.querySelector('[data-switch-to-login]');
    const signupForm = signupModal.querySelector('[data-signup-form]');

    // Function to dispatch a custom event
    const dispatchModalEvent = (eventName) => {
      signupModal.dispatchEvent(new CustomEvent(eventName, { bubbles: true }));
    };

    // Close on button click
    closeButton?.addEventListener('click', () => dispatchModalEvent('modal:close'));

    // Switch to login
    switchToLoginButton?.addEventListener('click', () => dispatchModalEvent('modal:switchToLogin'));

    // Close on backdrop click
    signupModal.addEventListener('click', (event) => {
      if (event.target === signupModal) {
        dispatchModalEvent('modal:close');
      }
    });

    // Handle form submission
    signupForm?.addEventListener('submit', (event) => {
      event.preventDefault();
      console.log('Signup form submitted from component');
      // You can add your actual signup logic here
      dispatchModalEvent('modal:close'); // Close modal after submission (or on success)
    });

    // Handle Escape key (centralized in parent for all modals)
  });
</script>